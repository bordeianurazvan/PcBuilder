// <auto-generated />
using System;
using Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20180614100928_urlColumn")]
    partial class urlColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Core.Domain.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CoolerHeight");

                    b.Property<int>("Fans");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<string>("MotherBoardFormFactor")
                        .IsRequired();

                    b.Property<int>("NumberOfSlots");

                    b.Property<double>("Price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("TotalFans");

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.Property<int>("VideoCardWidth");

                    b.HasKey("Id");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Data.Core.Domain.Cooler", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompatibleSockets")
                        .IsRequired();

                    b.Property<int>("FanSize");

                    b.Property<string>("FanSpeed");

                    b.Property<int>("Fans");

                    b.Property<int>("HeatPipes");

                    b.Property<int>("Height");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<string>("Noise");

                    b.Property<double>("Price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Coolers");
                });

            modelBuilder.Entity("Data.Core.Domain.Cpu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BaseFrequency");

                    b.Property<double>("Cache");

                    b.Property<string>("Core");

                    b.Property<int>("Cores");

                    b.Property<bool>("HasStockCooler");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<int>("MaximumRamMemory");

                    b.Property<double>("Price");

                    b.Property<double>("RamFrequency");

                    b.Property<string>("Series");

                    b.Property<string>("Socket")
                        .IsRequired();

                    b.Property<int>("Threads");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<double>("TurboFrequency");

                    b.Property<string>("TypeOfRam")
                        .IsRequired();

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Cpus");
                });

            modelBuilder.Entity("Data.Core.Domain.Motherboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FormFactor")
                        .IsRequired();

                    b.Property<string>("GraphicInterface")
                        .IsRequired();

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<int>("M2");

                    b.Property<double>("MaximumRamMemory");

                    b.Property<string>("Network");

                    b.Property<double>("Price");

                    b.Property<double>("RamFrequency");

                    b.Property<int>("RamSlots");

                    b.Property<int>("Sata");

                    b.Property<string>("Socket")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("TypeOfRam")
                        .IsRequired();

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Motherboards");
                });

            modelBuilder.Entity("Data.Core.Domain.PowerSupply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Certificate");

                    b.Property<string>("Cooler");

                    b.Property<string>("Efficiency");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<bool>("IsModular");

                    b.Property<string>("Pfc");

                    b.Property<string>("Power");

                    b.Property<double>("Price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("PowerSupplies");
                });

            modelBuilder.Entity("Data.Core.Domain.Ram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacity");

                    b.Property<double>("Frequency");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<string>("Latency");

                    b.Property<double>("Price");

                    b.Property<string>("Standard");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .IsRequired();

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Rams");
                });

            modelBuilder.Entity("Data.Core.Domain.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Capacity");

                    b.Property<string>("FormFactor")
                        .IsRequired();

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<string>("Interface")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.Property<string>("ReadSpeed");

                    b.Property<string>("Rpm");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Url");

                    b.Property<string>("WriteSpeed");

                    b.HasKey("Id");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Data.Core.Domain.VideoCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BaseFrequency");

                    b.Property<double>("GpuBoostClock");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<string>("Interface")
                        .IsRequired();

                    b.Property<int>("MemoryBus");

                    b.Property<double>("MemoryFrequency");

                    b.Property<int>("MemorySize");

                    b.Property<double>("Price");

                    b.Property<string>("Resolution");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.ToTable("VideoCards");
                });
#pragma warning restore 612, 618
        }
    }
}
